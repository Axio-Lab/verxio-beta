generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentRecord {
  id                    String        @id @default(cuid())
  reference             String        @unique
  amount                String
  recipient             String
  splToken              String
  status                PaymentStatus @default(PENDING)
  signature             String?
  loyaltyProgramAddress String?
  loyaltyProgramName    String?
  loyaltyDiscount       String        @default("0")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Performance indexes
  @@index([recipient])               // For recipient queries
  @@index([status])                  // For status filtering
  @@index([createdAt])               // For date sorting
  @@index([loyaltyProgramAddress])   // For loyalty queries
  @@map("payment_records")
}

model LoyaltyProgram {
  id                 String   @id @default(cuid())
  creator            String
  programPublicKey   String
  /// @encrypted
  programSecretKey   String
  signature          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  authorityPublicKey String
  /// @encrypted
  authoritySecretKey String

  // Performance indexes
  @@index([creator])                 // For getUserLoyaltyPrograms
  @@index([programPublicKey])        // For program lookups
}

model LoyaltyPass {
  id             String   @id @default(cuid())
  programAddress String
  recipient      String
  passPublicKey  String
  /// @encrypted
  passPrivateKey String
  signature      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Performance indexes
  @@index([programAddress])          // For getLoyaltyPassesByProgram
  @@index([recipient])               // For getLoyaltyPassByRecipient
  @@index([recipient, programAddress]) // Composite index for combined queries
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  email         String?
  name          String?
  bio           String?
  avatar        String?
  referralCode  String?  @unique
  referralCount Int      @default(0)
  pendingReferralCount Int @default(0)
  signupBonusClaimed Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Referral relationships
  referralsGiven    Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("ReferredUser")

  // Performance indexes
  @@index([email])           // For getUserByEmail queries
  @@index([walletAddress])   // For wallet lookups
  @@index([referralCode])    // For referral code lookups
  @@map("users")
}

model VerxioCredit {
  id          String   @id @default(cuid())
  userAddress String   @unique
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Performance indexes
  @@index([userAddress])             // For credit balance queries
  @@map("verxio_credits")
}

model VerxioCreditHistory {
  id           String   @id @default(cuid())
  creator      String
  points       Int
  action       String
  assetAddress String
  assetOwner   String
  createdAt    DateTime @default(now())

  // Performance indexes
  @@index([creator])                 // For user credit history
  @@index([createdAt])               // For date-based queries
  @@map("verxio_credit_history")
}

model LoyaltyProgramClaimStatus {
  id             String   @id @default(cuid())
  programAddress String   @unique
  claimEnabled   Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Performance indexes
  @@index([programAddress])          // For claim status lookups
  @@map("loyalty_program_claim_status")
}

model Referral {
  id              String        @id @default(cuid())
  referrerId      String
  referredUserId  String
  status          ReferralStatus @default(PENDING)
  referrerCreditsAwarded Boolean @default(false)
  referredUserCreditsAwarded Boolean @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  referrer        User          @relation("Referrer", fields: [referrerId], references: [id])
  referredUser    User          @relation("ReferredUser", fields: [referredUserId], references: [id])

  // Performance indexes
  @@index([referrerId])        // For referralsGiven queries
  @@index([referredUserId])    // For referralsReceived queries
  @@index([status])            // For status filtering
  @@index([createdAt])         // For date sorting
  @@map("referrals")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model TransferRecord {
  id                    String        @id @default(cuid())
  senderWalletAddress   String
  recipientWalletAddress String
  amount                Float
  sendType              SendType
  status                TransferStatus @default(PENDING)
  transactionHash       String?
  error                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Performance indexes
  @@index([senderWalletAddress])     // For sender queries
  @@index([recipientWalletAddress])  // For recipient queries
  @@index([status])                  // For status filtering
  @@index([createdAt])               // For date sorting
  @@map("transfer_records")
}

enum ReferralStatus {
  PENDING
  SUCCESS
}

enum SendType {
  VERXIO
  EXTERNAL
}

enum TransferStatus {
  PENDING
  SUCCESS
  FAILED
}
