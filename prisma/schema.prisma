generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentRecord {
  id                    String        @id @default(cuid())
  reference             String        @unique
  amount                String
  recipient             String
  splToken              String
  status                PaymentStatus @default(PENDING)
  signature             String?
  loyaltyProgramAddress String?
  loyaltyProgramName    String?
  loyaltyDiscount       String        @default("0")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([recipient])
  @@index([status])
  @@index([createdAt])
  @@index([loyaltyProgramAddress])
  @@map("payment_records")
}

model LoyaltyProgram {
  id                 String   @id @default(cuid())
  creator            String
  programPublicKey   String
  /// @encrypted
  programSecretKey   String
  signature          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  authorityPublicKey String
  /// @encrypted
  authoritySecretKey String

  @@index([creator])
  @@index([programPublicKey])
}

model LoyaltyPass {
  id             String   @id @default(cuid())
  programAddress String
  recipient      String
  passPublicKey  String
  /// @encrypted
  passPrivateKey String
  signature      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([programAddress])
  @@index([recipient, programAddress])
}

model User {
  id                   String     @id @default(cuid())
  walletAddress        String     @unique
  email                String?
  name                 String?
  bio                  String?
  avatar               String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  pendingReferralCount Int        @default(0)
  referralCode         String?    @unique
  referralCount        Int        @default(0)
  signupBonusClaimed   Boolean    @default(false)
  referralsReceived    Referral[] @relation("ReferredUser")
  referralsGiven       Referral[] @relation("Referrer")

  @@index([email])
  @@map("users")
}

model VerxioCredit {
  id          String   @id @default(cuid())
  userAddress String   @unique
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("verxio_credits")
}

model VerxioCreditHistory {
  id           String   @id @default(cuid())
  creator      String
  points       Int
  action       String
  assetAddress String
  assetOwner   String
  createdAt    DateTime @default(now())

  @@index([creator])
  @@index([createdAt])
  @@map("verxio_credit_history")
}

model LoyaltyProgramClaimStatus {
  id             String   @id @default(cuid())
  programAddress String   @unique
  claimEnabled   Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("loyalty_program_claim_status")
}

model Referral {
  id                         String         @id @default(cuid())
  referrerId                 String
  referredUserId             String
  status                     ReferralStatus @default(PENDING)
  referrerCreditsAwarded     Boolean        @default(false)
  referredUserCreditsAwarded Boolean        @default(false)
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  referredUser               User           @relation("ReferredUser", fields: [referredUserId], references: [id])
  referrer                   User           @relation("Referrer", fields: [referrerId], references: [id])

  @@index([referrerId])
  @@index([referredUserId])
  @@index([status])
  @@index([createdAt])
  @@map("referrals")
}

model TransferRecord {
  id                     String         @id @default(cuid())
  senderWalletAddress    String
  recipientWalletAddress String
  amount                 Float
  sendType               SendType
  status                 TransferStatus @default(PENDING)
  transactionHash        String?
  error                  String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@index([senderWalletAddress])
  @@index([recipientWalletAddress])
  @@index([status])
  @@index([createdAt])
  @@map("transfer_records")
}

model PajRampSession {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  String?
  expiresAt String?
  /// @encrypted
  token     String?
  uuid      String?
  device    String?
  os        String?
  browser   String?
  ip        String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isActive])
  @@map("paj_ramp_sessions")
}

model Task {
  id                     String              @id @default(cuid())
  creatorAddress         String
  taskName               String
  taskDescription        String
  submissionInstructions String
  image                  String?
  prizePool              Float
  numberOfWinners        Int
  maxParticipants        Int
  pointsPerAction        Int
  prizeSplits            String[]
  expiryDate             DateTime
  status                 TaskStatus          @default(ACTIVE)
  totalParticipants      Int                 @default(0)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  participations         TaskParticipation[]
  winners                TaskWinner[]

  @@index([creatorAddress])
  @@index([status])
  @@index([expiryDate])
  @@index([createdAt])
  @@map("tasks")
}

model TaskParticipation {
  id                 String              @id @default(cuid())
  taskId             String
  participantAddress String
  submissionData     String?
  submissionUrl      String?
  status             ParticipationStatus @default(SUBMITTED)
  submittedAt        DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  task               Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, participantAddress])
  @@index([taskId])
  @@index([participantAddress])
  @@index([status])
  @@index([submittedAt])
  @@map("task_participations")
}

model TaskWinner {
  id            String       @id @default(cuid())
  taskId        String
  winnerAddress String
  position      Int
  prizeAmount   Float
  selectedAt    DateTime     @default(now())
  claimedAt     DateTime?
  status        WinnerStatus @default(DISTRIBUTED)
  task          Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, position])
  @@index([taskId])
  @@index([winnerAddress])
  @@index([position])
  @@index([status])
  @@map("task_winners")
}

model Product {
  id                   String   @id @default(cuid())
  creatorAddress       String
  productName          String
  amount               Float
  pointsPerPurchase    Int
  isProduct            Boolean  @default(true)
  quantity             Int
  maxQuantity          Int      @default(50)
  redirectUrl          String
  image                String?
  enableReferral       Boolean  @default(false)
  referralPercentage   Int      @default(50)
  status               ProductStatus @default(ACTIVE)
  totalSold            Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  purchases            ProductPurchase[]

  @@index([creatorAddress])
  @@index([status])
  @@index([createdAt])
  @@map("products")
}

model ProductPurchase {
  id              String        @id @default(cuid())
  productId       String
  buyerAddress    String
  quantity        Int
  totalAmount     Float
  pointsAwarded   Int
  referralCode    String?
  referralAddress String?
  referralPoints  Int?
  status          PurchaseStatus @default(COMPLETED)
  purchasedAt     DateTime      @default(now())
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([buyerAddress])
  @@index([purchasedAt])
  @@index([status])
  @@map("product_purchases")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum ReferralStatus {
  PENDING
  SUCCESS
}

enum SendType {
  VERXIO
  EXTERNAL
}

enum TransferStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TaskStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ParticipationStatus {
  SUBMITTED
  REVIEWED
  REJECTED
  ACCEPTED
}

enum WinnerStatus {
  DISTRIBUTED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SOLD_OUT
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
